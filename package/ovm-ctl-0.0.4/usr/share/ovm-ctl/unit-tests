#!/bin/bash

# Unit tests for ovm-ctl
# Usage: source this file, then run whatever tests you desire. "console_vm" will test most features.
# You will need to set NAME, DISKSIZE, MEMSIZE, TARGET and IMAGE, and optionally USER or AUTHFILE.

OVMCTL=`which ovm-ctl`

ovm-ctl() {
	INVOCATION="$OVMCTL -v --debug"
	if [ "$USER" ]
	then
		INVOCATION="$INVOCATION -u $USER"
	elif [ "$AUTHFILE" ]
	then
		INVOCATION="$INVOCATION -a $AUTHFILE"
	fi
	$INVOCATION "$@"
}

checkenv() {
	fail=
	for var in "$@"
	do
		if [ ! "${!var}" ]
		then
			echo "Parameter \"$var\" not set"
			fail=true
		fi
	done
	[ $fail ] && return 1
	return 0
}

create_disk() {
	checkenv NAME DISKSIZE IMAGE &&
	ovm-ctl create disk $NAME with size $DISKSIZE and image $IMAGE &&
	ovm-ctl show disk $NAME
}

destroy_disk() {
	checkenv NAME &&
	ovm-ctl destroy disk $NAME &&
	{ ! ovm-ctl show disk $NAME; }
}

create_ip() {
	checkenv NAME &&
	ovm-ctl create ip with friendly $NAME &&
	ovm-ctl show ip $NAME
}

destroy_ip() {
	checkenv NAME || return 1
	IP=`ovm-ctl --quiet show ip $NAME | cut -f1`
	[ $IP ] || return 1
	ovm-ctl destroy ip $IP &&
	{ ! ovm-ctl show ip $NAME; }
}

create_vm() {
	checkenv NAME MEMSIZE &&
	ovm-ctl create vm $NAME with ram $MEMSIZE &&
	ovm-ctl show vm $NAME
}

destroy_vm() {
	checkenv NAME &&
	ovm-ctl destroy vm $NAME &&
	{ ! ovm-ctl show vm $NAME; }
}

attach_disk() {
	checkenv NAME TARGET || return 1
	x=`ovm-ctl --quiet show vm $NAME | wc -l`
	if [ ! $x ]; then return 1; fi
	ovm-ctl attach disk $NAME to $NAME with target $TARGET || return 1
	y=`ovm-ctl --quiet show vm $NAME | wc -l`
	(( x + 1 == y )) || return 1
}

detach_disk() {
	checkenv NAME || return 1
	x=`ovm-ctl --quiet show vm $NAME | wc -l`
	if [ ! $x ]; then return 1; fi
	ovm-ctl detach disk $NAME from $NAME || return 1
	y=`ovm-ctl --quiet show vm $NAME | wc -l`
	(( x == y + 1 )) || return 1
}

attach_ip() {
	checkenv NAME || return 1
	x=`ovm-ctl --quiet show vm $NAME | wc -l`
	if [ ! $x ]; then return 1; fi
	ovm-ctl attach ip $NAME to vm $NAME || return 1
	y=`ovm-ctl --quiet show vm $NAME | wc -l`
	(( x + 1 == y )) || return 1
}

detach_ip() {
	checkenv NAME || return 1
	x=`ovm-ctl --quiet show vm $NAME | wc -l`
	if [ ! $x ]; then return 1; fi
	ovm-ctl detach ip $NAME from $NAME || return 1
	y=`ovm-ctl --quiet show vm $NAME | wc -l`
	(( x == y + 1 )) || return 1
}

boot_vm() {
	checkenv NAME || return 1
	ovm-ctl boot vm $NAME || return 1
	state=`ovm-ctl -q show vm $NAME | head -n1 | cut -f3`
	[ "$state" == "Running" ] || return 1
}

shutdown_vm() {
	checkenv NAME || return 1
	ovm-ctl shutdown vm $NAME || return 1
	state=`ovm-ctl -q show vm $NAME | head -n1 | cut -f3`
	[ "$state" == "Shut down" ] || return 1
}

console_vm() {
	checkenv NAME &&
	ovm-ctl console $NAME
}

disk_test() {
	checkenv NAME DISKSIZE IMAGE &&
	create_disk && destroy_disk
}

ip_test() {
	checkenv NAME &&
	create_ip && destroy_ip
}

create_vm_full() {
	checkenv NAME DISKSIZE IMAGE TARGET MEMSIZE &&
	create_vm &&
	create_disk &&
	attach_disk &&
	create_ip &&
	attach_ip
}

destroy_vm_full() {
	checkenv NAME &&
	detach_ip &&
	destroy_ip &&
	detach_disk &&
	destroy_disk &&
	destroy_vm
}

vm_test() {
	checkenv NAME DISKSIZE IMAGE TARGET MEMSIZE &&
	create_vm_full && destroy_vm_full
}

# Checks all attach, detach, destroy, boot, shutdown, console. Checks all create except clone.
console_test() {
	checkenv NAME DISKSIZE IMAGE TARGET MEMSIZE &&
	create_vm_full &&
	boot_vm &&
	console_vm </dev/null &&
	shutdown_vm &&
	destroy_vm_full
}

# Do all shows that aren't tested by console_test
show_tests() {
	checkenv NAME DISKSIZE IMAGE TARGET MEMSIZE &&
	ovm-ctl show usage &&
	ovm-ctl show balance &&
	ovm-ctl show vms &&
	ovm-ctl show ips &&
	ovm-ctl show disks &&
	ovm-ctl show images
}

clone_test() {
	checkenv NAME DISKSIZE IMAGE &&
	create_disk &&
	ovm-ctl clone disk $NAME-2 from $NAME &&
	destroy_disk || return 1
	_NAME="$NAME"
	NAME="$NAME-2"
	destroy_disk || return 1
	NAME="$_NAME"
}
